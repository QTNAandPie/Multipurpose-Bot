import * as discord_js from 'discord.js';
import { Client } from 'discord.js';
import * as _discordjs_builders from '@discordjs/builders';

interface CommandKitOptions {
    client: Client;
    commandsPath?: string;
    eventsPath?: string;
    validationsPath?: string;
    devGuildIds?: string[];
    devUserIds?: string[];
    devRoleIds?: string[];
    skipBuiltInValidations?: boolean;
}

declare class CommandKit {
    #private;
    constructor({ ...options }: CommandKitOptions);
    get commands(): ({
        data: _discordjs_builders.SlashCommandBuilder | {
            name: string;
            name_localizations?: any;
            description: string;
            dm_permission?: boolean | undefined;
            options?: discord_js.APIApplicationCommandOption[] | undefined;
        };
        options?: {
            guildOnly?: boolean | undefined;
            devOnly?: boolean | undefined;
            deleted?: boolean | undefined;
            userPermissions?: discord_js.PermissionResolvable[] | undefined;
            botPermissions?: discord_js.PermissionResolvable[] | undefined;
        } | undefined;
    } | {
        data: _discordjs_builders.ContextMenuCommandBuilder | {
            name: string;
            name_localizations?: any;
            type: _discordjs_builders.ContextMenuCommandType;
            dm_permission?: boolean | undefined;
        };
        options?: {
            guildOnly?: boolean | undefined;
            devOnly?: boolean | undefined;
            deleted?: boolean | undefined;
            userPermissions?: discord_js.PermissionResolvable[] | undefined;
            botPermissions?: discord_js.PermissionResolvable[] | undefined;
        } | undefined;
    })[];
}

export { CommandKit };
